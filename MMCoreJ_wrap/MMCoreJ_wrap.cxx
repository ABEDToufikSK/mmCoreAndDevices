/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  static jclass jclass_MMCoreJJNI = NULL;
  static jmethodID director_methids[11];
}

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include "../MMDevice/MMDeviceConstants.h"
#include "../MMCore/Configuration.h"
#include "../MMDevice/ImageMetadata.h"
#include "../MMCore/MMEventCallback.h"
#include "../MMCore/MMCore.h"

SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< long >::const_reference std_vector_Sl_long_Sg__get(std::vector< long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector< long > *self,int i,std::vector< long >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< bool >::const_reference std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "MMCoreJ_wrap.h"

SwigDirector_MMEventCallback::SwigDirector_MMEventCallback(JNIEnv *jenv) : MMEventCallback(), Swig::Director(jenv) {
}

SwigDirector_MMEventCallback::~SwigDirector_MMEventCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_MMEventCallback::onPropertiesChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    MMEventCallback::onPropertiesChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onPropertyChanged(char const *name, char const *propName, char const *propValue) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jstring jpropName = 0 ;
  jstring jpropValue = 0 ;
  
  if (!swig_override[1]) {
    MMEventCallback::onPropertyChanged(name,propName,propValue);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jpropName = 0;
    if (propName) {
      jpropName = jenv->NewStringUTF((const char *)propName);
      if (!jpropName) return ;
    }
    jpropValue = 0;
    if (propValue) {
      jpropValue = jenv->NewStringUTF((const char *)propValue);
      if (!jpropValue) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[1], swigjobj, jname, jpropName, jpropValue);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onChannelGroupChanged(char const *newChannelGroupName) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jnewChannelGroupName = 0 ;
  
  if (!swig_override[2]) {
    MMEventCallback::onChannelGroupChanged(newChannelGroupName);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnewChannelGroupName = 0;
    if (newChannelGroupName) {
      jnewChannelGroupName = jenv->NewStringUTF((const char *)newChannelGroupName);
      if (!jnewChannelGroupName) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[2], swigjobj, jnewChannelGroupName);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onConfigGroupChanged(char const *groupName, char const *newConfigName) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jgroupName = 0 ;
  jstring jnewConfigName = 0 ;
  
  if (!swig_override[3]) {
    MMEventCallback::onConfigGroupChanged(groupName,newConfigName);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jgroupName = 0;
    if (groupName) {
      jgroupName = jenv->NewStringUTF((const char *)groupName);
      if (!jgroupName) return ;
    }
    jnewConfigName = 0;
    if (newConfigName) {
      jnewConfigName = jenv->NewStringUTF((const char *)newConfigName);
      if (!jnewConfigName) return ;
    }
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[3], swigjobj, jgroupName, jnewConfigName);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onSystemConfigurationLoaded() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    MMEventCallback::onSystemConfigurationLoaded();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[4], swigjobj);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onPixelSizeChanged(double newPixelSizeUm) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jnewPixelSizeUm  ;
  
  if (!swig_override[5]) {
    MMEventCallback::onPixelSizeChanged(newPixelSizeUm);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnewPixelSizeUm = (jdouble) newPixelSizeUm;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[5], swigjobj, jnewPixelSizeUm);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onPixelSizeAffineChanged(double v0, double v1, double v2, double v3, double v4, double v5) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jv0  ;
  jdouble jv1  ;
  jdouble jv2  ;
  jdouble jv3  ;
  jdouble jv4  ;
  jdouble jv5  ;
  
  if (!swig_override[6]) {
    MMEventCallback::onPixelSizeAffineChanged(v0,v1,v2,v3,v4,v5);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jv0 = (jdouble) v0;
    jv1 = (jdouble) v1;
    jv2 = (jdouble) v2;
    jv3 = (jdouble) v3;
    jv4 = (jdouble) v4;
    jv5 = (jdouble) v5;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[6], swigjobj, jv0, jv1, jv2, jv3, jv4, jv5);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onStagePositionChanged(char *name, double pos) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jdouble jpos  ;
  
  if (!swig_override[7]) {
    MMEventCallback::onStagePositionChanged(name,pos);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jpos = (jdouble) pos;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[7], swigjobj, jname, jpos);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onXYStagePositionChanged(char *name, double xpos, double ypos) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jdouble jxpos  ;
  jdouble jypos  ;
  
  if (!swig_override[8]) {
    MMEventCallback::onXYStagePositionChanged(name,xpos,ypos);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jxpos = (jdouble) xpos;
    jypos = (jdouble) ypos;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[8], swigjobj, jname, jxpos, jypos);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onExposureChanged(char *name, double newExposure) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jdouble jnewExposure  ;
  
  if (!swig_override[9]) {
    MMEventCallback::onExposureChanged(name,newExposure);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jnewExposure = (jdouble) newExposure;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[9], swigjobj, jname, jnewExposure);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::onSLMExposureChanged(char *name, double newExposure) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jdouble jnewExposure  ;
  
  if (!swig_override[10]) {
    MMEventCallback::onSLMExposureChanged(name,newExposure);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    jnewExposure = (jdouble) newExposure;
    jenv->CallStaticVoidMethod(Swig::jclass_MMCoreJJNI, Swig::director_methids[10], swigjobj, jname, jnewExposure);
    if (jenv->ExceptionOccurred()) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_MMEventCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onPropertiesChanged", "()V", NULL 
    },
    {
      "onPropertyChanged", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "onChannelGroupChanged", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onConfigGroupChanged", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "onSystemConfigurationLoaded", "()V", NULL 
    },
    {
      "onPixelSizeChanged", "(D)V", NULL 
    },
    {
      "onPixelSizeAffineChanged", "(DDDDDD)V", NULL 
    },
    {
      "onStagePositionChanged", "(Ljava/lang/String;D)V", NULL 
    },
    {
      "onXYStagePositionChanged", "(Ljava/lang/String;DD)V", NULL 
    },
    {
      "onExposureChanged", "(Ljava/lang/String;D)V", NULL 
    },
    {
      "onSLMExposureChanged", "(Ljava/lang/String;D)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("mmcorej/MMEventCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 11; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1CharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1CharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CharVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1LongVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< long > *)new std::vector< long >();
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1LongVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< long >::size_type arg1 ;
  std::vector< long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< long >::size_type)jarg1; 
  result = (std::vector< long > *)new std::vector< long >(arg1);
  *(std::vector< long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = ((std::vector< long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (std::vector< long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  result = (bool)((std::vector< long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  std::vector< long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  temp2 = (std::vector< long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_LongVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  int arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  std::vector< long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1LongVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< long > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1StrVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1StrVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1StrVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1BooleanVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1BooleanVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::const_reference result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool >::const_reference)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_BooleanVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1BooleanVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1UnsignedVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1UnsignedVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_UnsignedVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1UnsignedVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1pair_1ss_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1pair_1ss_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1pair_1ss_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  *(std::pair< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_pair_1ss_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_pair_1ss_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->first);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_pair_1ss_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_pair_1ss_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->second);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1pair_1ss(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1StrMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1StrMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_StrMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1StrMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_MM_1CODE_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_MM_1CODE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1ERR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INVALID_1PROPERTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INVALID_1PROPERTY_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1DUPLICATE_1PROPERTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INVALID_1PROPERTY_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NATIVE_1MODULE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1UNSUPPORTED_1DATA_1FORMAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INTERNAL_1INCONSISTENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NOT_1SUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1UNKNOWN_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1UNSUPPORTED_1COMMAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1UNKNOWN_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NO_1CALLBACK_1REGISTERED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(13);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SERIAL_1COMMAND_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(14);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SERIAL_1BUFFER_1OVERRUN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(15);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SERIAL_1INVALID_1RESPONSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(16);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SERIAL_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(17);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SELF_1REFERENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(18);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NO_1PROPERTY_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(19);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1DUPLICATE_1LABEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(20);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INVALID_1INPUT_1PARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(21);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1BUFFER_1OVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(22);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NONEXISTENT_1CHANNEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(23);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INVALID_1PROPERTY_1LIMTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(24);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SNAP_1IMAGE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(25);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1IMAGE_1PARAMS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(26);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CORE_1FOCUS_1STAGE_1UNDEF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(27);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CORE_1EXPOSURE_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(28);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CORE_1CONFIG_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(29);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CAMERA_1BUSY_1ACQUIRING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(30);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1INCOMPATIBLE_1IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(31);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CAN_1NOT_1SET_1PROPERTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(32);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1CORE_1CHANNEL_1PRESETS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(33);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1LOCALLY_1DEFINED_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(34);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NOT_1CONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(35);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1COMM_1HUB_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(36);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1DUPLICATE_1LIBRARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(37);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1PROPERTY_1NOT_1SEQUENCEABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(38);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1SEQUENCE_1TOO_1LARGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(39);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1OUT_1OF_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(40);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_DEVICE_1NOT_1YET_1IMPLEMENTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(41);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_MaxStrLength_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::MaxStrLength;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Description_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Description;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CameraName_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CameraName;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CameraID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CameraID;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CameraChannelName_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CameraChannelName;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CameraChannelIndex_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CameraChannelIndex;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Binning_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Binning;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Exposure_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Exposure;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1ActualExposure_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_ActualExposure;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1ActualInterval_1ms_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_ActualInterval_ms;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Interval_1ms_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Interval_ms;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Elapsed_1Time_1ms_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Elapsed_Time_ms;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1PixelType_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_PixelType;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1ReadoutTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_ReadoutTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1ReadoutMode_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_ReadoutMode;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Gain_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Gain;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1EMGain_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_EMGain;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Offset_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Offset;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CCDTemperature_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CCDTemperature;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CCDTemperatureSetPoint_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CCDTemperatureSetPoint;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1State_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_State;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Label_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Label;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Position_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Position;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Type;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Delay_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Delay;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1BaudRate_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_BaudRate;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1DataBits_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_DataBits;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1StopBits_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_StopBits;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Parity_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Parity;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Handshaking_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Handshaking;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1DelayBetweenCharsMs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_DelayBetweenCharsMs;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Port_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Port;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1AnswerTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_AnswerTimeout;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Speed_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Speed;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreDevice_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreDevice;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreInitialize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreInitialize;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreCamera_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreCamera;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreShutter_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreShutter;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreXYStage_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreXYStage;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreFocus_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreFocus;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreAutoFocus_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreAutoFocus;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreAutoShutter_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreAutoShutter;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreChannelGroup_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreChannelGroup;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreImageProcessor_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreImageProcessor;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreSLM_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreSLM;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreGalvo_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreGalvo;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1CoreTimeoutMs_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_CoreTimeoutMs;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Channel_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Channel;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Version_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Version;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1ColorMode_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_ColorMode;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Transpose_1SwapXY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Transpose_SwapXY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Transpose_1MirrorX_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Transpose_MirrorX;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Transpose_1MirrorY_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Transpose_MirrorY;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Transpose_1Correction_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Transpose_Correction;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Closed_1Position_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Closed_Position;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1HubID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_HubID;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Meatdata_1Exposure_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Meatdata_Exposure;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1Score_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_Score;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1ImageNumber_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_ImageNumber;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1StartTime_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_StartTime;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1ROI_1X_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_ROI_X;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1ROI_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_ROI_Y;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1Keyword_1Metadata_1TimeInCore_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_Keyword_Metadata_TimeInCore;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1FieldDelimiters_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_FieldDelimiters;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Device_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Device;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Label_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Label;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Property_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Property;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Configuration_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Configuration;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1ConfigGroup_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_ConfigGroup;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Equipment_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Equipment;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1Delay_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_Delay;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1ImageSynchro_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_ImageSynchro;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1ConfigPixelSize_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_ConfigPixelSize;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1PixelSize_1um_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_PixelSize_um;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1PixelSizeAffine_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_PixelSizeAffine;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1ParentID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_ParentID;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGCommand_1FocusDirection_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGCommand_FocusDirection;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGGroup_1System_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGGroup_System;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGGroup_1System_1Startup_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGGroup_System_Startup;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGGroup_1System_1Shutdown_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGGroup_System_Shutdown;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_g_1CFGGroup_1PixelSizeUm_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)MM::g_CFGGroup_PixelSizeUm;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1DATABITS_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_DATABITS_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1DATABITS_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_DATABITS_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1DATABITS_17_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_DATABITS_7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1DATABITS_18_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_DATABITS_8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1FLOWCONTROL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_FLOWCONTROL_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1FLOWCONTROL_1RTSCTS_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_FLOWCONTROL_RTSCTS_IN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1FLOWCONTROL_1RTSCTS_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_FLOWCONTROL_RTSCTS_OUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1FLOWCONTROL_1XONXOFF_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_FLOWCONTROL_XONXOFF_IN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1FLOWCONTROL_1XONXOFF_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_FLOWCONTROL_XONXOFF_OUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1PARITY_1EVEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_PARITY_EVEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1PARITY_1MARK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_PARITY_MARK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1PARITY_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_PARITY_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1PARITY_1ODD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_PARITY_ODD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1PARITY_1SPACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_PARITY_SPACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1STOPBITS_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_STOPBITS_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1STOPBITS_11_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_STOPBITS_1_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI__1STOPBITS_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)MM::_STOPBITS_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_UnknownType_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MM::DeviceType result;
  
  (void)jenv;
  (void)jcls;
  result = (MM::DeviceType)MM::UnknownType;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_Unimplemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MM::DeviceDetectionStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (MM::DeviceDetectionStatus)MM::Unimplemented;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_Misconfigured_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MM::DeviceDetectionStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (MM::DeviceDetectionStatus)MM::Misconfigured;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CanNotCommunicate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MM::DeviceDetectionStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (MM::DeviceDetectionStatus)MM::CanNotCommunicate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CanCommunicate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  MM::DeviceDetectionStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (MM::DeviceDetectionStatus)MM::CanCommunicate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertySetting_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  PropertySetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (PropertySetting *)new PropertySetting((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(PropertySetting **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertySetting_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  PropertySetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (PropertySetting *)new PropertySetting((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(PropertySetting **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertySetting_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PropertySetting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PropertySetting *)new PropertySetting();
  *(PropertySetting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1PropertySetting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PropertySetting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getDeviceLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = ((PropertySetting const *)arg1)->getDeviceLabel();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getPropertyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = ((PropertySetting const *)arg1)->getPropertyName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = (bool)((PropertySetting const *)arg1)->getReadOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getPropertyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = ((PropertySetting const *)arg1)->getPropertyValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = ((PropertySetting const *)arg1)->getKey();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1generateKey(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = PropertySetting::generateKey((char const *)arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1getVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertySetting **)&jarg1; 
  result = ((PropertySetting const *)arg1)->getVerbose();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_PropertySetting_1isEqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  PropertySetting *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PropertySetting **)&jarg1; 
  arg2 = *(PropertySetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySetting const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isEqualTo((PropertySetting const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertyPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  PropertyPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (PropertyPair *)new PropertyPair((char const *)arg1,(char const *)arg2);
  *(PropertyPair **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertyPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PropertyPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PropertyPair *)new PropertyPair();
  *(PropertyPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1PropertyPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PropertyPair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertyPair_1getPropertyName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyPair **)&jarg1; 
  result = ((PropertyPair const *)arg1)->getPropertyName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertyPair_1getPropertyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyPair **)&jarg1; 
  result = ((PropertyPair const *)arg1)->getPropertyValue();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1Configuration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Configuration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Configuration *)new Configuration();
  *(Configuration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1Configuration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Configuration *arg1 = (Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Configuration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1addSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Configuration *arg1 = (Configuration *) 0 ;
  PropertySetting *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = *(PropertySetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySetting const & reference is null");
    return ;
  } 
  (arg1)->addSetting((PropertySetting const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1deleteSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->deleteSetting((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1isPropertyIncluded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->isPropertyIncluded((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1isSettingIncluded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  PropertySetting *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = *(PropertySetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertySetting const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isSettingIncluded((PropertySetting const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1isConfigurationIncluded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  Configuration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = *(Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Configuration const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isConfigurationIncluded((Configuration const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1getSetting_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  size_t arg2 ;
  PropertySetting result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((Configuration const *)arg1)->getSetting(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(PropertySetting **)&jresult = new PropertySetting((const PropertySetting &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1getSetting_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  PropertySetting result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->getSetting((char const *)arg2,(char const *)arg3);
  *(PropertySetting **)&jresult = new PropertySetting((const PropertySetting &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  result = ((Configuration const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_Configuration_1getVerbose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Configuration *arg1 = (Configuration *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Configuration **)&jarg1; 
  result = ((Configuration const *)arg1)->getVerbose();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1PropertyBlock(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PropertyBlock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PropertyBlock *)new PropertyBlock();
  *(PropertyBlock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1PropertyBlock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PropertyBlock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_PropertyBlock_1addPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  PropertyPair *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PropertyBlock **)&jarg1; 
  arg2 = *(PropertyPair **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "PropertyPair const & reference is null");
    return ;
  } 
  (arg1)->addPair((PropertyPair const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_PropertyBlock_1getPair(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  size_t arg2 ;
  PropertyPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyBlock **)&jarg1; 
  arg2 = (size_t)jarg2; 
  try {
    result = ((PropertyBlock const *)arg1)->getPair(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(PropertyPair **)&jresult = new PropertyPair((const PropertyPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_PropertyBlock_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyBlock **)&jarg1; 
  result = ((PropertyBlock const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_PropertyBlock_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PropertyBlock **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = ((PropertyBlock const *)arg1)->getValue((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1CMMCore(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CMMCore *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CMMCore *)new CMMCore();
  *(CMMCore **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1CMMCore(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CMMCore **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1noop(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CMMCore::noop();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  try {
    (arg1)->loadDevice((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1unloadDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->unloadDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1unloadAllDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->unloadAllDevices();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1initializeAllDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->initializeAllDevices();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1initializeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->initializeDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->reset();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1unloadLibrary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->unloadLibrary((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1updateCoreProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->updateCoreProperties();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCoreErrorText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((CMMCore const *)arg1)->getCoreErrorText(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getVersionInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getVersionInfo();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAPIVersionInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getAPIVersionInfo();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSystemState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getSystemState();
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSystemState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  Configuration *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(Configuration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Configuration const & reference is null");
    return ;
  } 
  (arg1)->setSystemState((Configuration const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getConfigState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getConfigState((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getConfigGroupState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getConfigGroupState((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1saveSystemState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->saveSystemState((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadSystemState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->loadSystemState((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1saveSystemConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->saveSystemConfiguration((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadSystemConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->loadSystemConfiguration((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1registerCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  MMEventCallback *arg2 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(MMEventCallback **)&jarg2; 
  (arg1)->registerCallback(arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPrimaryLogFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setPrimaryLogFile((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPrimaryLogFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setPrimaryLogFile((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPrimaryLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getPrimaryLogFile();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1logMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->logMessage((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1logMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->logMessage((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1enableDebugLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableDebugLog(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1debugLogEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (bool)(arg1)->debugLogEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1enableStderrLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableStderrLog(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stderrLogEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (bool)(arg1)->stderrLogEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSecondaryLogFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSecondaryLogFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSecondaryLogFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopSecondaryLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->stopSecondaryLogFile(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceAdapterSearchPaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getDeviceAdapterSearchPaths();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setDeviceAdapterSearchPaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->setDeviceAdapterSearchPaths((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1addSearchPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  CMMCore::addSearchPath((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceAdapterNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (arg1)->getDeviceAdapterNames();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceLibraries(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  try {
    result = CMMCore::getDeviceLibraries();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailableDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getAvailableDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailableDeviceDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getAvailableDeviceDescriptions((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailableDeviceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< long > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getAvailableDeviceTypes((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< long > **)&jresult = new std::vector< long >((const std::vector< long > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLoadedDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getLoadedDevices();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLoadedDevicesOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (MM::DeviceType)jarg2; 
  result = ((CMMCore const *)arg1)->getLoadedDevicesOfType(arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  MM::DeviceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (MM::DeviceType)(arg1)->getDeviceType((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceLibrary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getDeviceLibrary((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getDeviceName((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getDeviceDescription((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDevicePropertyNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getDevicePropertyNames((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1hasProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (bool)(arg1)->hasProperty((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getProperty((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setProperty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (long)jarg4; 
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setProperty_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jfloat jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (float)jarg4; 
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setProperty_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jdouble jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (double)jarg4; 
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAllowedPropertyValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getAllowedPropertyValues((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isPropertyReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (bool)(arg1)->isPropertyReadOnly((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isPropertyPreInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (bool)(arg1)->isPropertyPreInit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isPropertySequenceable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (bool)(arg1)->isPropertySequenceable((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1hasPropertyLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (bool)(arg1)->hasPropertyLimits((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertyLowerLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (double)(arg1)->getPropertyLowerLimit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertyUpperLimit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (double)(arg1)->getPropertyUpperLimit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertyType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  MM::PropertyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (MM::PropertyType)(arg1)->getPropertyType((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startPropertySequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->startPropertySequence((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopPropertySequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->stopPropertySequence((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertySequenceMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (long)(arg1)->getPropertySequenceMaxLength((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadPropertySequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string > arg4 ;
  std::vector< std::string > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  argp4 = *(std::vector< std::string > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg4 = *argp4; 
  try {
    (arg1)->loadPropertySequence((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deviceBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->deviceBusy((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1waitForDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->waitForDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1waitForConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->waitForConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1systemBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->systemBusy();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1waitForSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->waitForSystem();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1waitForImageSynchro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->waitForImageSynchro();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deviceTypeBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (MM::DeviceType)jarg2; 
  try {
    result = (bool)(arg1)->deviceTypeBusy(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1waitForDeviceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (MM::DeviceType)jarg2; 
  try {
    (arg1)->waitForDeviceType(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getDeviceDelayMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getDeviceDelayMs((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setDeviceDelayMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setDeviceDelayMs((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1usesDeviceDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->usesDeviceDelay((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setTimeoutMs(arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getTimeoutMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (long)(arg1)->getTimeoutMs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1sleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  ((CMMCore const *)arg1)->sleep(arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCameraDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getCameraDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getShutterDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getShutterDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getFocusDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getFocusDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXYStageDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getXYStageDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAutoFocusDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getAutoFocusDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImageProcessorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getImageProcessorDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getSLMDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getGalvoDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getChannelGroup();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setCameraDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setCameraDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setShutterDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setShutterDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setFocusDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setFocusDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setXYStageDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setXYStageDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAutoFocusDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setAutoFocusDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setImageProcessorDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setImageProcessorDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setSLMDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setGalvoDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setGalvoDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setChannelGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setChannelGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSystemStateCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getSystemStateCache();
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1updateSystemStateCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  (arg1)->updateSystemStateCache();
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertyFromCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = ((CMMCore const *)arg1)->getPropertyFromCache((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCurrentConfigFromCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getCurrentConfigFromCache((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getConfigGroupStateFromCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getConfigGroupStateFromCache((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1defineConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->defineConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1defineConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  try {
    (arg1)->defineConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1defineConfigGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->defineConfigGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deleteConfigGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->deleteConfigGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1renameConfigGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->renameConfigGroup((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isGroupDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->isGroupDefined((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isConfigDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->isConfigDefined((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->setConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deleteConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->deleteConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deleteConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  try {
    (arg1)->deleteConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1renameConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  try {
    (arg1)->renameConfig((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailableConfigGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getAvailableConfigGroups();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailableConfigs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((CMMCore const *)arg1)->getAvailableConfigs((char const *)arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCurrentConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getCurrentConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getConfigData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getConfigData((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCurrentPixelSizeConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (arg1)->getCurrentPixelSizeConfig();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCurrentPixelSizeConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    result = (arg1)->getCurrentPixelSizeConfig(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeUm_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (double)(arg1)->getPixelSizeUm();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeUm_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (double)(arg1)->getPixelSizeUm(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeUmByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getPixelSizeUmByID((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeAffine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (arg1)->getPixelSizeAffine();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeAffine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    result = (arg1)->getPixelSizeAffine(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeAffineByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getPixelSizeAffineByID((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getMagnificationFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (double)((CMMCore const *)arg1)->getMagnificationFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPixelSizeUm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setPixelSizeUm((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPixelSizeAffine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->setPixelSizeAffine((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1definePixelSizeConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  try {
    (arg1)->definePixelSizeConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1definePixelSizeConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->definePixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailablePixelSizeConfigs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getAvailablePixelSizeConfigs();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isPixelSizeConfigDefined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)((CMMCore const *)arg1)->isPixelSizeConfigDefined((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPixelSizeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setPixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1renamePixelSizeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->renamePixelSizeConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deletePixelSizeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->deletePixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPixelSizeConfigData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  Configuration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getPixelSizeConfigData((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(Configuration **)&jresult = new Configuration((const Configuration &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1definePropertyBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->definePropertyBlock((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAvailablePropertyBlocks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getAvailablePropertyBlocks();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPropertyBlockData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  PropertyBlock result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getPropertyBlockData((char const *)arg2);
  *(PropertyBlock **)&jresult = new PropertyBlock((const PropertyBlock &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setROI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  try {
    (arg1)->setROI(arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setROI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  try {
    (arg1)->setROI((char const *)arg2,arg3,arg4,arg5,arg6);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getROI_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int temp2 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg5 = &temp5; 
  }
  try {
    (arg1)->getROI(*arg2,*arg3,*arg4,*arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  
  
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getROI_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jintArray jarg3, jintArray jarg4, jintArray jarg5, jintArray jarg6) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int temp3 ;
  int temp4 ;
  int temp5 ;
  int temp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg5 = &temp5; 
  }
  {
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg6) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg6 = &temp6; 
  }
  try {
    (arg1)->getROI((char const *)arg2,*arg3,*arg4,*arg5,*arg6);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp4;
    jenv->SetIntArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp5;
    jenv->SetIntArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp6;
    jenv->SetIntArrayRegion(jarg6, 0, 1, &jvalue);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1clearROI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->clearROI();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isMultiROISupported(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->isMultiROISupported();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isMultiROIEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->isMultiROIEnabled();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setMultiROI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > arg3 ;
  std::vector< unsigned int > arg4 ;
  std::vector< unsigned int > arg5 ;
  std::vector< unsigned int > *argp2 ;
  std::vector< unsigned int > *argp3 ;
  std::vector< unsigned int > *argp4 ;
  std::vector< unsigned int > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(CMMCore **)&jarg1; 
  argp2 = *(std::vector< unsigned int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< unsigned int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int >");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< unsigned int > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int >");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(std::vector< unsigned int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned int >");
    return ;
  }
  arg5 = *argp5; 
  try {
    (arg1)->setMultiROI(arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getMultiROI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  std::vector< unsigned int > *arg3 = 0 ;
  std::vector< unsigned int > *arg4 = 0 ;
  std::vector< unsigned int > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return ;
  } 
  arg3 = *(std::vector< unsigned int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return ;
  } 
  arg4 = *(std::vector< unsigned int > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return ;
  } 
  arg5 = *(std::vector< unsigned int > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return ;
  } 
  try {
    (arg1)->getMultiROI(*arg2,*arg3,*arg4,*arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setExposure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->setExposure(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setExposure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setExposure((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getExposure_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (double)(arg1)->getExposure();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getExposure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getExposure((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1snapImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->snapImage();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (void *)(arg1)->getImage();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = (void *)(arg1)->getImage(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImageWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getImageWidth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImageHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getImageHeight();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getBytesPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getBytesPerPixel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImageBitDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getImageBitDepth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getNumberOfComponents();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getNumberOfCameraChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getNumberOfCameraChannels();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCameraChannelName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->getCameraChannelName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getImageBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (long)(arg1)->getImageBufferSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1assignImageSynchro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->assignImageSynchro((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1removeImageSynchro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->removeImageSynchro((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1removeImageSynchroAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  (arg1)->removeImageSynchroAll();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAutoShutter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoShutter(arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAutoShutter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (bool)(arg1)->getAutoShutter();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setShutterOpen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setShutterOpen(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getShutterOpen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->getShutterOpen();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setShutterOpen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setShutterOpen((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getShutterOpen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->getShutterOpen((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSequenceAcquisition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jboolean jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  long arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->startSequenceAcquisition(arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSequenceAcquisition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jboolean jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (long)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  try {
    (arg1)->startSequenceAcquisition((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1prepareSequenceAcquisition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->prepareSequenceAcquisition((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startContinuousSequenceAcquisition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->startContinuousSequenceAcquisition(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopSequenceAcquisition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->stopSequenceAcquisition();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopSequenceAcquisition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stopSequenceAcquisition((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isSequenceRunning_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (bool)(arg1)->isSequenceRunning();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isSequenceRunning_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isSequenceRunning((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLastImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (void *)(arg1)->getLastImage();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1popNextImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (void *)(arg1)->popNextImage();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLastImageMD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Metadata *arg4 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(Metadata **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata & reference is null");
    return 0;
  } 
  try {
    result = (void *)((CMMCore const *)arg1)->getLastImageMD(arg2,arg3,*arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1popNextImageMD_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Metadata *arg4 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(Metadata **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata & reference is null");
    return 0;
  } 
  try {
    result = (void *)(arg1)->popNextImageMD(arg2,arg3,*arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLastImageMD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Metadata *arg2 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(Metadata **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata & reference is null");
    return 0;
  } 
  try {
    result = (void *)((CMMCore const *)arg1)->getLastImageMD(*arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getNBeforeLastImageMD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned long arg2 ;
  Metadata *arg3 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = *(Metadata **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata & reference is null");
    return 0;
  } 
  try {
    result = (void *)((CMMCore const *)arg1)->getNBeforeLastImageMD(arg2,*arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1popNextImageMD_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jobject jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Metadata *arg2 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = *(Metadata **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata & reference is null");
    return 0;
  } 
  try {
    result = (void *)(arg1)->popNextImageMD(*arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  {
    long lSize = (arg1)->getImageWidth() * (arg1)->getImageHeight();
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      // create a new byte[] object in Java
      jbyteArray data = jenv->NewByteArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetByteArrayRegion(data, 0, lSize, (jbyte*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize, (jshort*)result);
      
      jresult = data;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      if ((arg1)->getNumberOfComponents() == 1)
      {
        // create a new float[] object in Java
        jfloatArray data = jenv->NewFloatArray(lSize);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetFloatArrayRegion(data, 0, lSize, (jfloat*)result);
        
        jresult = data;
      }
      else
      {
        // create a new byte[] object in Java
        jbyteArray data = jenv->NewByteArray(lSize * 4);
        if (data == 0)
        {
          jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
          if (excep)
          jenv->ThrowNew(excep, "The system ran out of memory!");
          
          jresult = 0;
          return jresult;
        }
        
        // copy pixels from the image buffer
        jenv->SetByteArrayRegion(data, 0, lSize * 4, (jbyte*)result);
        
        jresult = data;
      }
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      // create a new short[] object in Java
      jshortArray data = jenv->NewShortArray(lSize * 4);
      if (data == 0)
      {
        jclass excep = jenv->FindClass("java/lang/OutOfMemoryError");
        if (excep)
        jenv->ThrowNew(excep, "The system ran out of memory!");
        jresult = 0;
        return jresult;
      }
      
      // copy pixels from the image buffer
      jenv->SetShortArrayRegion(data, 0, lSize * 4, (jshort*)result);
      
      jresult = data;
    }
    
    else
    {
      // don't know how to map
      // TODO: throw exception?
      jresult = 0;
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getRemainingImageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (long)(arg1)->getRemainingImageCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getBufferTotalCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (long)(arg1)->getBufferTotalCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getBufferFreeCapacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (long)(arg1)->getBufferFreeCapacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isBufferOverflowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (bool)((CMMCore const *)arg1)->isBufferOverflowed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setCircularBufferMemoryFootprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setCircularBufferMemoryFootprint(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCircularBufferMemoryFootprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (unsigned int)(arg1)->getCircularBufferMemoryFootprint();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1initializeCircularBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->initializeCircularBuffer();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1clearCircularBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->clearCircularBuffer();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isExposureSequenceable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isExposureSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startExposureSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->startExposureSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopExposureSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stopExposureSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getExposureSequenceMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (long)(arg1)->getExposureSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadExposureSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->loadExposureSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLastFocusScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (double)(arg1)->getLastFocusScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getCurrentFocusScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (double)(arg1)->getCurrentFocusScore();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1enableContinuousFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->enableContinuousFocus(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isContinuousFocusEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->isContinuousFocusEnabled();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isContinuousFocusLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (bool)(arg1)->isContinuousFocusLocked();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isContinuousFocusDrive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isContinuousFocusDrive((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1fullFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->fullFocus();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1incrementalFocus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->incrementalFocus();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAutoFocusOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->setAutoFocusOffset(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getAutoFocusOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (double)(arg1)->getAutoFocusOffset();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (long)jarg3; 
  try {
    (arg1)->setState((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (long)(arg1)->getState((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getNumberOfStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (long)(arg1)->getNumberOfStates((char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setStateLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->setStateLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getStateLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getStateLabel((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1defineStateLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (long)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  try {
    (arg1)->defineStateLabel((char const *)arg2,arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getStateLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getStateLabels((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getStateFromLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (long)(arg1)->getStateFromLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getStateLabelData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  PropertyBlock result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (arg1)->getStateLabelData((char const *)arg2,(char const *)arg3);
  *(PropertyBlock **)&jresult = new PropertyBlock((const PropertyBlock &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  PropertyBlock result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (arg1)->getData((char const *)arg2);
  *(PropertyBlock **)&jresult = new PropertyBlock((const PropertyBlock &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setPosition((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->setPosition(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (double)(arg1)->getPosition();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setRelativePosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setRelativePosition((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setRelativePosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->setRelativePosition(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOrigin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setOrigin((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOrigin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->setOrigin();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAdapterOrigin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setAdapterOrigin((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAdapterOrigin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  try {
    (arg1)->setAdapterOrigin(arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setFocusDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->setFocusDirection((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getFocusDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (int)(arg1)->getFocusDirection((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isStageSequenceable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isStageSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isStageLinearSequenceable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isStageLinearSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->startStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stopStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getStageSequenceMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (long)(arg1)->getStageSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > arg3 ;
  std::vector< double > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->loadStageSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setStageLinearSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jint jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  try {
    (arg1)->setStageLinearSequence((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setXYPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  try {
    (arg1)->setXYPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setXYPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  try {
    (arg1)->setXYPosition(arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setRelativeXYPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  try {
    (arg1)->setRelativeXYPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setRelativeXYPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  try {
    (arg1)->setRelativeXYPosition(arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXYPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double temp3 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  try {
    (arg1)->getXYPosition((char const *)arg2,*arg3,*arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXYPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp2 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  try {
    (arg1)->getXYPosition(*arg2,*arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getXPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getYPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getYPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (double)(arg1)->getXPosition();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getYPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    result = (double)(arg1)->getYPosition();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stop((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1home(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->home((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginXY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setOriginXY((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginXY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->setOriginXY();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setOriginX((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->setOriginX();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->setOriginY((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setOriginY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  try {
    (arg1)->setOriginY();
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAdapterOriginXY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  try {
    (arg1)->setAdapterOriginXY((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setAdapterOriginXY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  try {
    (arg1)->setAdapterOriginXY(arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1isXYStageSequenceable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (bool)(arg1)->isXYStageSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startXYStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->startXYStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopXYStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stopXYStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getXYStageSequenceMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (long)(arg1)->getXYStageSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadXYStageSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double > arg3 ;
  std::vector< double > arg4 ;
  std::vector< double > *argp3 ;
  std::vector< double > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  argp3 = *(std::vector< double > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< double > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< double >");
    return ;
  }
  arg4 = *argp4; 
  try {
    (arg1)->loadXYStageSequence((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSerialProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return ;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return ;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return ;
  }
  try {
    (arg1)->setSerialProperties((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSerialPortCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  try {
    (arg1)->setSerialPortCommand((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSerialPortAnswer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getSerialPortAnswer((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1writeToSerialPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< char > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(std::vector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  try {
    (arg1)->writeToSerialPort((char const *)arg2,(std::vector< char > const &)*arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1readFromSerialPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->readFromSerialPort((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jbyteArray jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    // Assume that we are sending an image to an SLM device, one byte per pixel (monochrome grayscale).
    
    long expectedLength = (arg1)->getSLMWidth(arg2) * (arg1)->getSLMHeight(arg2);
    long receivedLength = jenv->GetArrayLength(jarg3);
    
    if (receivedLength != expectedLength && receivedLength != expectedLength*4)
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, "Image dimensions are wrong for this SLM.");
      return;
    }
    
    arg3 = (unsigned char *) jenv->GetByteArrayElements(jarg3, 0);
  }
  try {
    (arg1)->setSLMImage((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    // Allow the Java byte array to be garbage collected.
    jenv->ReleaseByteArrayElements(jarg3, (jbyte *) arg3, JNI_ABORT); // JNI_ABORT = Don't alter the original array.
  }
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jintArray jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  imgRGB32 arg3 = (imgRGB32) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    // Assume that we are sending an image to an SLM device, one int (four bytes) per pixel.
    
    if  ((arg1)->getSLMBytesPerPixel(arg2) != 4)
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, "32-bit array received but not expected for this SLM.");
      return;
    }
    
    long expectedLength = (arg1)->getSLMWidth(arg2) * (arg1)->getSLMHeight(arg2);
    long receivedLength = jenv->GetArrayLength((jarray) jarg3);
    
    if (receivedLength != expectedLength)
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, "Image dimensions are wrong for this SLM.");
      return;
    }
    
    arg3 = (imgRGB32) jenv->GetIntArrayElements((jintArray) jarg3, 0);
  }
  try {
    (arg1)->setSLMImage((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    // Allow the Java int array to be garbage collected.
    jenv->ReleaseIntArrayElements(jarg3, (jint *) arg3, JNI_ABORT); // JNI_ABORT = Don't alter the original array.
  }
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMPixelsTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (unsigned char)jarg3; 
  try {
    (arg1)->setSLMPixelsTo((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMPixelsTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3, jshort jarg4, jshort jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  try {
    (arg1)->setSLMPixelsTo((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1displaySLMImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->displaySLMImage((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setSLMExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setSLMExposure((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getSLMExposure((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (unsigned int)(arg1)->getSLMWidth((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (unsigned int)(arg1)->getSLMHeight((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMNumberOfComponents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (unsigned int)(arg1)->getSLMNumberOfComponents((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMBytesPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (unsigned int)(arg1)->getSLMBytesPerPixel((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getSLMSequenceMaxLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (long)(arg1)->getSLMSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1startSLMSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->startSLMSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1stopSLMSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->stopSLMSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadSLMSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::vector< unsigned char * > > arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    // Assume that we are sending an image to an SLM device, one byte per pixel (monochrome grayscale).
    
    long expectedLength = (arg1)->getSLMWidth(arg2) * (arg1)->getSLMHeight(arg2);
    std::vector<unsigned char*> inputVector;
    jclass clazz = jenv->FindClass("java/util/List");
    jmethodID sizeMethodID = jenv->GetMethodID(clazz, "size", "()I");
    // get JNI ID for java.util.List.get(int i) method.
    // Because of type erasure we specify an "Object" return value,
    // but we expect a byte[] to be returned.
    jmethodID getMethodID = jenv->GetMethodID(clazz, "get", "(I)Ljava/lang/Object;");
    int listSize = jenv->CallIntMethod(jarg3, sizeMethodID);
    
    for (int i = 0; i < listSize; ++i) {
      jbyteArray pixels = (jbyteArray) jenv->CallObjectMethod(jarg3, getMethodID, i);
      long receivedLength = jenv->GetArrayLength(pixels);
      if (receivedLength != expectedLength && receivedLength != expectedLength*4)
      {
        jclass excep = jenv->FindClass("java/lang/Exception");
        if (excep)
        jenv->ThrowNew(excep, "Image dimensions are wrong for this SLM.");
        return;
      }
      inputVector.push_back((unsigned char *) jenv->GetByteArrayElements(pixels, 0));
    }
    arg3 = inputVector;
  }
  try {
    (arg1)->loadSLMSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    // Allow the Java List to be garbage collected.
    // Not sure how to do that here -- may not be necessary.
    //JCALL3(ReleaseByteArrayElements, jenv, jarg3, (jbyte *) arg3, JNI_ABORT); // JNI_ABORT = Don't alter the original array.
  }
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1pointGalvoAndFire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  try {
    (arg1)->pointGalvoAndFire((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setGalvoSpotInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  try {
    (arg1)->setGalvoSpotInterval((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setGalvoPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  try {
    (arg1)->setGalvoPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double temp3 ;
  double temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    arg4 = &temp4; 
  }
  try {
    (arg1)->getGalvoPosition((char const *)arg2,*arg3,*arg4);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setGalvoIlluminationState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setGalvoIlluminationState((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoXRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getGalvoXRange((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoXMinimum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getGalvoXMinimum((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoYRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getGalvoYRange((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoYMinimum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (double)(arg1)->getGalvoYMinimum((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = (jdouble)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1addGalvoPolygonVertex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jdouble jarg4, jdouble jarg5) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  try {
    (arg1)->addGalvoPolygonVertex((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1deleteGalvoPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->deleteGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1loadGalvoPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->loadGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setGalvoPolygonRepetitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  try {
    (arg1)->setGalvoPolygonRepetitions((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1runGalvoPolygons(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->runGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1runGalvoSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  try {
    (arg1)->runGalvoSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getGalvoChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getGalvoChannel((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1supportsDeviceDetection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->supportsDeviceDetection(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1detectDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  MM::DeviceDetectionStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (MM::DeviceDetectionStatus)(arg1)->detectDevice(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getParentLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getParentLabel((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1setParentLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  try {
    (arg1)->setParentLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return ;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getInstalledDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getInstalledDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getInstalledDeviceDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  try {
    result = (arg1)->getInstalledDeviceDescription((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getLoadedPeripheralDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = (arg1)->getLoadedPeripheralDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getFullMsg().c_str());
      return 0;
    }
  }
  
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getUserId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getHostName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = ((CMMCore const *)arg1)->getHostName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_CMMCore_1getMACAddresses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CMMCore **)&jarg1; 
  result = (arg1)->getMACAddresses();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1MetadataError(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  MetadataError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (MetadataError *)new MetadataError((char const *)arg1);
  *(MetadataError **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1MetadataError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MetadataError *arg1 = (MetadataError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MetadataError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataError_1getMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataError *arg1 = (MetadataError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataError **)&jarg1; 
  result = (arg1)->getMsg();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1MetadataTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MetadataTag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1GetDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (std::string *) &((MetadataTag const *)arg1)->GetDevice();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1GetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (std::string *) &((MetadataTag const *)arg1)->GetName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1GetQualifiedName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = ((MetadataTag const *)arg1)->GetQualifiedName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1IsReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (bool)((MetadataTag const *)arg1)->IsReadOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1SetDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetDevice((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1SetName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1SetReadOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetReadOnly(arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1ToSingleTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  MetadataSingleTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (MetadataSingleTag *)((MetadataTag const *)arg1)->ToSingleTag();
  *(MetadataSingleTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1ToArrayTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  MetadataArrayTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (MetadataArrayTag *)((MetadataTag const *)arg1)->ToArrayTag();
  *(MetadataArrayTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  MetadataTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (MetadataTag *)(arg1)->Clone();
  *(MetadataTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  result = (arg1)->Serialize();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_MetadataTag_1Restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Restore((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1MetadataSingleTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MetadataSingleTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MetadataSingleTag *)new MetadataSingleTag();
  *(MetadataSingleTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1MetadataSingleTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  MetadataSingleTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (MetadataSingleTag *)new MetadataSingleTag((char const *)arg1,(char const *)arg2,arg3);
  *(MetadataSingleTag **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1MetadataSingleTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  result = (std::string *) &((MetadataSingleTag const *)arg1)->GetValue();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetValue((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1ToSingleTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  MetadataSingleTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  result = (MetadataSingleTag *)((MetadataSingleTag const *)arg1)->ToSingleTag();
  *(MetadataSingleTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  MetadataTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  result = (MetadataTag *)(arg1)->Clone();
  *(MetadataTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  result = (arg1)->Serialize();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1Restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataSingleTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Restore((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1MetadataArrayTag(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MetadataArrayTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MetadataArrayTag *)new MetadataArrayTag();
  *(MetadataArrayTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1MetadataArrayTag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1ToArrayTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  MetadataArrayTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  result = (MetadataArrayTag *)((MetadataArrayTag const *)arg1)->ToArrayTag();
  *(MetadataArrayTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1AddValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->AddValue((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1SetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (size_t)jarg3; 
  (arg1)->SetValue((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1GetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  size_t arg2 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (std::string *) &((MetadataArrayTag const *)arg1)->GetValue(arg2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1GetSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  result = ((MetadataArrayTag const *)arg1)->GetSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  MetadataTag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  result = (MetadataTag *)(arg1)->Clone();
  *(MetadataTag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  result = (arg1)->Serialize();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1Restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MetadataArrayTag **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Restore((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1Metadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Metadata *)new Metadata();
  *(Metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1Metadata(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Metadata *arg1 = (Metadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Metadata **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1Metadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Metadata *arg1 = 0 ;
  Metadata *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata const & reference is null");
    return 0;
  } 
  result = (Metadata *)new Metadata((Metadata const &)*arg1);
  *(Metadata **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1Clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Metadata *arg1 = (Metadata *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1GetKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = ((Metadata const *)arg1)->GetKeys();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1HasTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->HasTag((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1GetSingleTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  MetadataSingleTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = ((Metadata const *)arg1)->GetSingleTag((char const *)arg2);
  }
  catch(MetadataKeyError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getMsg().c_str());
      return 0;
    }
  }
  
  *(MetadataSingleTag **)&jresult = new MetadataSingleTag((const MetadataSingleTag &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1GetArrayTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  MetadataArrayTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  try {
    result = ((Metadata const *)arg1)->GetArrayTag((char const *)arg2);
  }
  catch(MetadataKeyError &_e) {
    {
      jclass excep = jenv->FindClass("java/lang/Exception");
      if (excep)
      jenv->ThrowNew(excep, (&_e)->getMsg().c_str());
      return 0;
    }
  }
  
  *(MetadataArrayTag **)&jresult = new MetadataArrayTag((const MetadataArrayTag &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1SetTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Metadata *arg1 = (Metadata *) 0 ;
  MetadataTag *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = *(MetadataTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MetadataTag & reference is null");
    return ;
  } 
  (arg1)->SetTag(*arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1RemoveTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RemoveTag((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1Merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Metadata *arg1 = (Metadata *) 0 ;
  Metadata *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = *(Metadata **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Metadata const & reference is null");
    return ;
  } 
  (arg1)->Merge((Metadata const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = ((Metadata const *)arg1)->Serialize();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1readLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  std::istringstream *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = *(std::istringstream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::istringstream & reference is null");
    return 0;
  } 
  result = (arg1)->readLine(*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1Restore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->Restore((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_mmcorej_MMCoreJJNI_Metadata_1Dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Metadata *arg1 = (Metadata *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Metadata **)&jarg1; 
  result = (arg1)->Dump();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_new_1MMEventCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MMEventCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MMEventCallback *)new SwigDirector_MMEventCallback(jenv);
  *(MMEventCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_delete_1MMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MMEventCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPropertiesChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  (arg1)->onPropertiesChanged();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPropertiesChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  (arg1)->MMEventCallback::onPropertiesChanged();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPropertyChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->onPropertyChanged((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPropertyChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->MMEventCallback::onPropertyChanged((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onChannelGroupChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->onChannelGroupChanged((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onChannelGroupChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->MMEventCallback::onChannelGroupChanged((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onConfigGroupChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->onConfigGroupChanged((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onConfigGroupChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->MMEventCallback::onConfigGroupChanged((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onSystemConfigurationLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  (arg1)->onSystemConfigurationLoaded();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onSystemConfigurationLoadedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  (arg1)->MMEventCallback::onSystemConfigurationLoaded();
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPixelSizeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->onPixelSizeChanged(arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPixelSizeChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->MMEventCallback::onPixelSizeChanged(arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPixelSizeAffineChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->onPixelSizeAffineChanged(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onPixelSizeAffineChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  (arg1)->MMEventCallback::onPixelSizeAffineChanged(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onStagePositionChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->onStagePositionChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onStagePositionChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->MMEventCallback::onStagePositionChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onXYStagePositionChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->onXYStagePositionChanged(arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onXYStagePositionChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->MMEventCallback::onXYStagePositionChanged(arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onExposureChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->onExposureChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onExposureChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->MMEventCallback::onExposureChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onSLMExposureChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->onSLMExposureChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1onSLMExposureChangedSwigExplicitMMEventCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MMEventCallback **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (double)jarg3; 
  (arg1)->MMEventCallback::onSLMExposureChanged(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  MMEventCallback *obj = *((MMEventCallback **)&objarg);
  (void)jcls;
  SwigDirector_MMEventCallback *director = dynamic_cast<SwigDirector_MMEventCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_MMEventCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  MMEventCallback *obj = *((MMEventCallback **)&objarg);
  SwigDirector_MMEventCallback *director = dynamic_cast<SwigDirector_MMEventCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataSingleTag_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MetadataTag **)&baseptr = *(MetadataSingleTag **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_mmcorej_MMCoreJJNI_MetadataArrayTag_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MetadataTag **)&baseptr = *(MetadataArrayTag **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_mmcorej_MMCoreJJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[11] = {
    {
      "SwigDirector_MMEventCallback_onPropertiesChanged", "(Lmmcorej/MMEventCallback;)V" 
    },
    {
      "SwigDirector_MMEventCallback_onPropertyChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_MMEventCallback_onChannelGroupChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_MMEventCallback_onConfigGroupChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_MMEventCallback_onSystemConfigurationLoaded", "(Lmmcorej/MMEventCallback;)V" 
    },
    {
      "SwigDirector_MMEventCallback_onPixelSizeChanged", "(Lmmcorej/MMEventCallback;D)V" 
    },
    {
      "SwigDirector_MMEventCallback_onPixelSizeAffineChanged", "(Lmmcorej/MMEventCallback;DDDDDD)V" 
    },
    {
      "SwigDirector_MMEventCallback_onStagePositionChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;D)V" 
    },
    {
      "SwigDirector_MMEventCallback_onXYStagePositionChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;DD)V" 
    },
    {
      "SwigDirector_MMEventCallback_onExposureChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;D)V" 
    },
    {
      "SwigDirector_MMEventCallback_onSLMExposureChanged", "(Lmmcorej/MMEventCallback;Ljava/lang/String;D)V" 
    }
  };
  Swig::jclass_MMCoreJJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_MMCoreJJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

